Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.


NAME: NATASHA MORTENSEN
5/20/2022

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000 (primary key: id)
vi. Checkin = 493
vii. Photo = 10000 (primary key: id)
viii. Tip = 3979 (foreign key: business_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

	/*Counts the null values in each column of the user table and returns
		the aggregate of each column*/
	SELECT
	SUM(CASE 
	WHEN id IS NULL THEN 1
    		ELSE 0
    		END) AS idnulls,
	SUM(CASE 
	WHEN name IS NULL THEN 1
    		ELSE 0
    		END) AS namenulls,
	SUM(CASE 
	WHEN review_count IS NULL THEN 1
    		ELSE 0
    		END) AS reviewcountnulls,
	SUM(CASE 
	WHEN yelping_since IS NULL THEN 1
    		ELSE 0
    		END) AS yelpingsincenulls,
	SUM(CASE
	WHEN useful IS NULL THEN 1
    		ELSE 0
    		END) AS usefulnulls,
	SUM(CASE 
	WHEN funny IS NULL THEN 1
    		ELSE 0
    		END) AS funnynulls,
	SUM(CASE 
	WHEN cool IS NULL THEN 1
    		ELSE 0
    		END) AS coolnulls,
	SUM(CASE 
	WHEN fans IS NULL THEN 1
    		ELSE 0
    		END) AS fansnulls,
	SUM(CASE 
	WHEN average_stars IS NULL THEN 1
    		ELSE 0
    		END) AS averagestarsnulls,
	SUM(CASE 
	WHEN compliment_hot IS NULL THEN 1
    		ELSE 0
    		END) AS complimenthotnulls,
	SUM(CASE 
	WHEN compliment_more IS NULL THEN 1
    		ELSE 0
    		END) AS complimentmorenulls,
	SUM(CASE 
	WHEN compliment_profile IS NULL THEN 1
    		ELSE 0
    		END) AS complimentprofilenulls,
	SUM(CASE 
	WHEN compliment_cute IS NULL THEN 1
    		ELSE 0
    		END) AS complimentcutenulls,
	SUM(CASE 
	WHEN compliment_list IS NULL THEN 1
    		ELSE 0
    		END) AS complimentlistnulls,
	SUM(CASE 
	WHEN compliment_note IS NULL THEN 1
    		ELSE 0
    		END) AS complimentnotenulls,
	SUM(CASE 
	WHEN compliment_plain IS NULL THEN 1
    		ELSE 0
    		END) AS complimentplainnulls,
	SUM(CASE 
	WHEN compliment_cool IS NULL THEN 1
    		ELSE 0
    		END) AS complimentcoolnulls,
	SUM(CASE 
	WHEN compliment_funny IS NULL THEN 1
    		ELSE 0
    		END) AS complimentfunnynulls,
	SUM(CASE 
	WHEN compliment_writer IS NULL THEN 1
    		ELSE 0
    		END) AS complimentwriternulls,
	SUM(CASE 
	WHEN compliment_photos IS NULL THEN 1
    		ELSE 0
    		END) AS complimentphotosnulls
	FROM user;
	
	

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:  1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	/*Retrieves city and review_count columns, and returns the
		pair in descending order by review_count*/
	SELECT city,
	review_count
	FROM business
	GROUP BY city
	ORDER by review_count DESC;
	
	
	Copy and Paste the Result Below:

	+------------------------+--------------+
	| city                   | review_count |
	+------------------------+--------------+	
	| Woodmere Village       |          242 |
	| Mount Lebanon          |          138 |
	| Charlotte              |          120 |
	| McMurray               |          112 |	
	| North York             |          109 |
	| Enterprise             |           89 |
	| Matthews               |           77 |
	| Munroe Falls           |           74 |
	| Ahwatukee              |           69 |
	| Pittsburgh             |           68 |
	| Woodmere               |           68 |
	| Tolleson               |           65 |
	| Pineville              |           63 |
	| Carnegie               |           61 |
	| Macedonia              |           58 |
	| Markham                |           54 |
	| Whitchurch-Stouffville |           52 |
	| Windsor                |           50 |
	| Goodyear               |           49 |
	| Gibsonia               |           45 |
	| Summerlin              |           44 |
	| Peninsula              |           42 |
	| Richfield              |           42 |
	| Dormont                |           40 |
	| nboulder city          |           40 |
	+------------------------+--------------+
	(Output limit exceeded, 25 of 362 total rows shown)


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

	/*Counts the total stars for the city of Avon and returns the 
		star count for each star rating*/
	SELECT stars,
	COUNT(stars) AS avonstars_count
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------+-----------------+
	| stars | avonstars_count |
	+-------+-----------------+
	|   1.5 |               1 |
	|   2.5 |               2 |
	|   3.5 |               3 |
	|   4.0 |               2 |
	|   4.5 |               1 |
	|   5.0 |               1 |
	+-------+-----------------+


ii. Beachwood

SQL code used to arrive at answer:

	/*Counts the total stars for the city of Beachwood and returns the 
		star count for each star rating*/
	SELECT stars,
	COUNT(stars) AS beachwoodstars_count
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

	+-------+----------------------+
	| stars | beachwoodstars_count |
	+-------+----------------------+
	|   2.0 |                    1 |
	|   2.5 |                    1 |
	|   3.0 |                    2 |
	|   3.5 |                    2 |
	|   4.0 |                    1 |
	|   4.5 |                    2 |
	|   5.0 |                    5 |
	+-------+----------------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	/*Retrieves the name and review_count for each user, lists the pair in descending
		order by review_count, and returns only the first three records*/
	SELECT name,
	review_count
	FROM user
	ORDER BY review_count DESC
	LIMIT 3;
	

	Copy and Paste the Result Below:
	
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+
		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

	Yes, posting more reviews correlates with more fans. As the number of reviews increased, the
	average number of fans increased as well. Users who posted less than 500 reviews had an average
	of 1 fan, users who posted between 500 to 1000 reviews had an average of about 76 fans, users who
	posted between 1000 and 1500 reviews had an average of about 122 fans, and users who posted between
	1500 to 2000 reviews had an average of about 152 fans.

	SQL code:

	--Creating groups for each range of review numbers
	SELECT
	CASE
		WHEN review_count <= 500 then '<500'
		WHEN review_count > 500 AND review_count <= 1000 then '500-1000'
		WHEN review_count > 1000 AND review_count <= 1500 then '1000-1500'
		WHEN review_count > 1500 AND review_count <= 2000 then '1500-2000'
		ELSE 'other'
		END review_number,
	--Retrieving the average of the review_count and fans columns
	AVG(review_count) AS average_reviews,
	AVG(fans) AS average_fans
	FROM user
	--Grouping by the number of reviews and ordering by row ID
	GROUP BY review_number
	ORDER BY rowid DESC;
	
	Result:
	+---------------+-----------------+---------------+
	| review_number | average_reviews |  average_fans |
	+---------------+-----------------+---------------+
	| <500          |   20.6133440514 | 1.08551045016 |
	| 500-1000      |          677.85 |          76.4 |
	| 1000-1500     |   1184.66666667 | 122.333333333 |
	| 1500-2000     |          1814.5 |         151.5 |
	+---------------+-----------------+---------------+

	

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	
	There are more reviews with the word "love" in them than the word "hate".
	+-----------+-----------+
	| lovecount | hatecount |
	+-----------+-----------+
	|      1780 |       232 |
	+-----------+-----------+

	
	SQL code used to arrive at answer:

	/*Looks for either the word "love" or the word "hate" in the review text and
		returns the total count for each word*/ 
	SELECT
	SUM(CASE
	WHEN text LIKE '%love%' THEN 1
    		ELSE 0
    		END) AS lovecount,
	SUM(CASE
	WHEN text LIKE '%hate%' THEN 1
    		ELSE 0
    		END) AS hatecount
	FROM review;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	/*Retrieves the name and fans of all the users, lists the pair in descending order
		by the number of fans, and returns only the first ten records*/
	SELECT name,
	fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10;
	
	
	Copy and Paste the Result Below:
	
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

2-3 star restaurants in Toronto:
	Big Smoke Burger
	99 Cent Sushi
	Pizzaiolo
4-5 star restaurants in Toronto:
	Mama Mia
	Cabin Fever
	Sushi Osaka
	Naniwa-Taro
	Edulis


i. Do the two groups you chose to analyze have a different distribution of hours?
	
	Yes, the 2-3 star restaurants are generally open earlier than the 4-5 star restaurants.
	The 2-3 star restaurants open in the morning and close in the evening or night, while the 
	4-5 star restaurants are mostly open in the afternoon and close in the night. This also
	means that the 4-5 star restaurants are generally open for a shorter time period.


ii. Do the two groups you chose to analyze have a different number of reviews?
	
	Yes, the 4-5 star restaurants have a higher number of reviews with an average of 41.2,
	while the 2-3 star restaurants have a lower number of reviews with an average of 28.7.


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	There's not enough data to say for sure, but the 2-3 star restaurants are in different 
	neighborhoods than the 4-5 star restaurants. The 2-3 star restaurants are all in the 
	Downtown Core and Entertainment District areas, while the 4-5 star restaurants are in
	various neighborhoods (High Park, Etobicoke, Willowdale, Niagara).


SQL code used for analysis:

	--Selecting business name, number of reviews, star rating, location data, and hours
	SELECT b.name,
	b.review_count,
	b.stars,
	--Grouping businesses into 2-3 stars and 4-5 stars
	CASE
	  WHEN stars >= 2.0 AND stars <= 3.0 THEN '2-3'
	  WHEN stars >= 4.0 AND stars <= 5.0 THEN '4-5'
	  ELSE 'other'
	  END stars_group,
	b.neighborhood,
	b.postal_code,
	h.hours,
	--Grouping business hour opening times into  morning and afternoon
    	CASE
        WHEN hours LIKE '%9:00%' OR hours LIKE '%10:00%' OR hours LIKE '%10:30%'
            OR hours LIKE '%11:00%' THEN 'morning'
        WHEN hours LIKE '%12:00%' OR hours LIKE '%14:00%' OR hours LIKE '%16:00%'
            OR hours LIKE '%18:00%' THEN 'afternoon'
        ELSE 'other'
        END start_times,
	--Grouping business hour closing times into afternoon, evening, and night
    	CASE
        WHEN hours LIKE '%16:00' THEN 'afternoon'
        WHEN hours LIKE '%19:00%' OR hours LIKE '%21:00%' THEN 'evening'
        WHEN hours LIKE '%23:00%' OR hours LIKE '%2:00%' OR HOURS LIKE '%4:00%' 
            THEN 'night'
        ELSE 'other'
        END end_times
	--Joining the business, category, and hours tables
	FROM (business b INNER JOIN category c ON b.id = c.business_id)
	  LEFT JOIN hours h ON b.id = h.business_id
	--Retrieving only the records that are restaurants from Toronto
	WHERE city = 'Toronto' AND category = 'Restaurants'
	  AND stars_group = '2-3';  --Rating range is changed based on query that needs to be pulled
		
	
	
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.


i. Difference 1: There are a lot more open businesses than closed ones. There are a total number of 
	1520 closed businesses and 8480 open businesses.

         
ii. Difference 2: The average stars and average review count is lower for closed businesses than open 
	businesses.The average star rating for closed businesses is 3.5 stars and the average number of 
	reviews is 23. Meanwhile, the average star rating for open businesses is 3.7 stars and the average
	number of reviews is 32. This means that the closed businesses had a lower overall rating and a 
	fewer amount of reviews than the open businesses.
     
         
SQL code used for analysis:

	/*Counts the number of records in the is_open column, calculates the averages of the stars
		and review_count columns, and returns all three columns for both closed and open businesses*/
	SELECT is_open,
	COUNT(is_open) AS total_count,
	AVG(stars) as star_average,
	AVG(review_count) AS reviewcount_average
	FROM business
	GROUP BY is_open;

	+---------+-------------+---------------+---------------------+
	| is_open | total_count |  star_average | reviewcount_average |
	+---------+-------------+---------------+---------------------+
	|       0 |        1520 | 3.52039473684 |       23.1980263158 |
	|       1 |        8480 | 3.67900943396 |       31.7570754717 |
	+---------+-------------+---------------+---------------------+

	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

	I am going to group users based on how long they have been on Yelp to analyze if 
	there is a correlation between the number of fans that the user has and the number
	of years that the user has been on Yelp.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	
	For my analysis, I will need to select the yelping_since column and to calculate
	the total number of years that each user has been on Yelp. I will also need to
	retrieve the average number of fans that the users have and group that based on
	the total amount of years that the users have been on Yelp.
	
	Selecting the yelping_since column will be necessary for calculating the number
	of years the user has been on Yelp from when they joined until now. I also chose
	to find the average number of fans for the total years because it's an easier
	and more concise way to analyze the overall number of fans rather than focusing
	on individual data.
	           
                  
iii. Output of your finished dataset:
	+-------------+-------------+-----------------+
	| year_joined | total_years |    average_fans |
	+-------------+-------------+-----------------+
	| 2017        |           5 | 0.0327380952381 |
	| 2016        |           6 |   0.10598626104 |
	| 2015        |           7 |  0.360222531293 |
	| 2014        |           8 |  0.476963011032 |
	| 2013        |           9 |  0.740686632579 |
	| 2012        |          10 |   1.39313572543 |
	| 2011        |          11 |    1.8799675588 |
	| 2010        |          12 |    2.2684144819 |
	| 2009        |          13 |   4.55165692008 |
	| 2008        |          14 |   5.49084249084 |
	| 2007        |          15 |   13.5413533835 |
	| 2006        |          16 |   13.4081632653 |
	| 2005        |          17 |   22.8461538462 |
	+-------------+-------------+-----------------+
         
iv. Provide the SQL code you used to create your final dataset:
	
	/*Retrieves the year from the yelping_since column and finds the average of the fans
		column, then returns the dataset grouped by the total number of years the user 
		has been on Yelp*/
	SELECT STRFTIME('%Y', yelping_since) AS year_joined,
	DATE('now') - yelping_since AS total_years,
	AVG(fans) AS average_fans
	FROM user
	GROUP BY total_years;